<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Git | AndyZ's Blog]]></title>
  <link href="http://andystu.github.io/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://andystu.github.io/"/>
  <updated>2015-09-19T23:01:58+08:00</updated>
  <id>http://andystu.github.io/</id>
  <author>
    <name><![CDATA[AndyZ (Yu-Chieh Chang)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Use Command Line Show Git Tree]]></title>
    <link href="http://andystu.github.io/blog/2015/01/13/how-to-use-command-line-show-git-tree/"/>
    <updated>2015-01-13T18:11:36+08:00</updated>
    <id>http://andystu.github.io/blog/2015/01/13/how-to-use-command-line-show-git-tree</id>
    <content type="html"><![CDATA[<pre><code class="bash">$ git log --pretty=oneline --graph --decorate --all
$ git log --oneline --graph --decorate --all
$ gitk --simplify-by-decoration --all
$ gitk --all
$ git show-branch --all
$ git log --all --graph --decorate --oneline --simplify-by-decoration
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Flow Usage]]></title>
    <link href="http://andystu.github.io/blog/2014/12/24/git-flow-usage/"/>
    <updated>2014-12-24T23:34:12+08:00</updated>
    <id>http://andystu.github.io/blog/2014/12/24/git-flow-usage</id>
    <content type="html"><![CDATA[<h3>git-flow usage notes</h3>

<ul>
<li><p>install git-flow on Mac
<code>bash
$ brew install git-flow # Done
</code></p></li>
<li><p>usage how-to (for feature)</p></li>
</ul>


<pre><code class="bash">$ git flow init # under project folder, git-flow would ask few questions, using the default value is recommended. 
$ git flow feature start MY_FEATURE # XXX is branch name
# add some files or do something ...
$ git add .
$ git commmit -am 'do something ...'
$ git flow feature publish MY_FEATURE # push to remote repo
$ git flow feature finish MY_FEATURE
</code></pre>

<ul>
<li>usage how-to 2 (for release)</li>
</ul>


<pre><code class="bash">$ git flow release start RELEASE [BASE] 
# e.g. git flow release start Version_1.0
$ git add .
$ git commit -am 'do something ...'
$ git flow release finish RELEASE
</code></pre>

<h4>[recommand reference]</h4>

<p><a href="http://danielkummer.github.io/git-flow-cheatsheet/">http://danielkummer.github.io/git-flow-cheatsheet/</a> <br/>
<a href="http://fireqqtw.logdown.com/posts/206951-git-flow-notes">http://fireqqtw.logdown.com/posts/206951-git-flow-notes</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Usage Notes]]></title>
    <link href="http://andystu.github.io/blog/2014/12/23/git-usage-notes/"/>
    <updated>2014-12-23T16:11:10+08:00</updated>
    <id>http://andystu.github.io/blog/2014/12/23/git-usage-notes</id>
    <content type="html"><![CDATA[<h2>Install git via homebrew</h2>

<pre><code class="bash">$ brew install git # If we want to use gitk (git GUI), this way is very convinient. (however, I think SourceTree is better.)
</code></pre>

<h2>Git work processes</h2>

<ul>
<li>sign up a github account</li>
<li>create a repos (repository) with a &ldquo;name&rdquo;</li>
<li>then git it
&#8220;` bash

<h1>rails project</h1>

<p>$ rails new app
$ cd app
$ git init
$ git add .
$ git commit -m &lsquo;first commit&rsquo;</p></li>
</ul>


<p>$ git checkout -b branch_name
$ git branch # list branches in the project</p>

<h1>do some changes under this branch &hellip;</h1>

<p>$ git add .
$ git commit -am &lsquo;some thing in this brach&rsquo;</p>

<h1>more about <code>git commit</code></h1>

<p>$ git commit -am &lsquo;xxxx&rsquo; # == git add . + git commit -m &lsquo;xxxx&rsquo;
$ git commit &ndash;amend # reword commit message</p>

<h1>go back to master and merge it</h1>

<p>$ git checkout master
$ git merge branch_name</p>

<h1>push to github</h1>

<p>$ git remote add origin repos_git_ssh_url
$ git push &ndash;all # both master and branches
$ git push origin master # you also can push master to remote only</p>

<h1>reset or revert to HEAD version (HEAD refers to latest commit stage)</h1>

<p>$ git reset HEAD &ndash;hard # &ndash;hard is dangerous (delete unstaged files)
$ git reset HEAD &ndash;soft # &ndash;soft will go back and keep files staged
$ git reset HEAD # will go back without tracking unstaged files
$ git revert HEAD # make HEAD stage as new stage</p>

<h1>reset one file</h1>

<p>$ git checkout &ndash; <file></p>

<h1>conflick of rebase (merge is the same)</h1>

<p>$ git rebase master # under second branch</p>

<h1>conflick &hellip;</h1>

<h1>modify conflick <file></h1>

<h1>then</h1>

<p>$ git add <file>
$ git rebase &ndash;continue</p>

<h1>done.</h1>

<h1>To remove untracked files / directories do:</h1>

<p>$ git clean -fdx</p>

<h1>-f - force</h1>

<h1>-d - directories too</h1>

<h1>-x - remove ignored files too ( don&rsquo;t use this if you don&rsquo;t want to remove ignored files)</h1>

<p>&#8220;`</p>

<h3>great reference</h3>

<p><a href="http://blog.yorkxin.org/posts/2011/07/29/git-rebase">http://blog.yorkxin.org/posts/2011/07/29/git-rebase</a> <br/>
<a href="http://blog.gogojimmy.net/2012/02/29/git-scenario/">http://blog.gogojimmy.net/2012/02/29/git-scenario/</a></p>
]]></content>
  </entry>
  
</feed>
